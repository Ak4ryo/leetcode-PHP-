class Solution {

    /**
     * Returns all possible letter combinations that the number could represent.
     *
     * @param String $digits The input string containing digits from 2-9.
     * @return String[] An array of possible letter combinations.
     */
    function letterCombinations($digits) {
        if (empty($digits)) {
            return [];
        }
        
        // Mapping of digits to corresponding letters
        $digitToLetters = [
            '2' => ['a', 'b', 'c'],
            '3' => ['d', 'e', 'f'],
            '4' => ['g', 'h', 'i'],
            '5' => ['j', 'k', 'l'],
            '6' => ['m', 'n', 'o'],
            '7' => ['p', 'q', 'r', 's'],
            '8' => ['t', 'u', 'v'],
            '9' => ['w', 'x', 'y', 'z'],
        ];
        
        $result = [];
        
        // Helper function to perform backtracking
        $backtrack = function($combination, $nextDigits) use (&$backtrack, $digitToLetters, &$result) {
            // If there are no more digits to process, add the combination to the result
            if (strlen($nextDigits) == 0) {
                $result[] = $combination;
            } else {
                // Get the letters that the current digit maps to
                $digit = $nextDigits[0];
                $letters = $digitToLetters[$digit];
                
                // Loop through the letters and recurse
                foreach ($letters as $letter) {
                    $backtrack($combination . $letter, substr($nextDigits, 1));
                }
            }
        };
        
        // Start the backtracking with an empty combination and the full input digits
        $backtrack('', $digits);
        
        return $result;
    }
}
