class Solution {

    /**
     * Finds the median of two sorted arrays.
     *
     * @param Integer[] $nums1 The first sorted array.
     * @param Integer[] $nums2 The second sorted array.
     * @return Float The median of the two sorted arrays.
     * @throws Exception If input arrays are not sorted or have invalid lengths.
     */
    function findMedianSortedArrays($nums1, $nums2) {
        $m = count($nums1);
        $n = count($nums2);
        
        // Ensure nums1 is the smaller array to simplify the binary search
        if ($m > $n) {
            return $this->findMedianSortedArrays($nums2, $nums1);
        }

        $imin = 0;
        $imax = $m;
        $half_len = (int)(($m + $n + 1) / 2);
        
        // Perform binary search on nums1 to partition both arrays such that:
        // nums1[0 ... i-1] + nums2[0 ... j-1] are on the left side
        // nums1[i ... m-1] + nums2[j ... n-1] are on the right side
        while ($imin <= $imax) {
            $i = (int)(($imin + $imax) / 2);
            $j = $half_len - $i;
            
            // Check conditions to adjust binary search boundaries
            if ($i < $m && $nums1[$i] < $nums2[$j - 1]) {
                // i is too small, increase it
                $imin = $i + 1;
            } else if ($i > 0 && $nums1[$i - 1] > $nums2[$j]) {
                // i is too large, decrease it
                $imax = $i - 1;
            } else {
                // i is perfect or the boundaries are correct
                
                // Calculate the median based on the partitioning
                $max_of_left = 0;
                if ($i == 0) { $max_of_left = $nums2[$j - 1]; }
                else if ($j == 0) { $max_of_left = $nums1[$i - 1]; }
                else { $max_of_left = max($nums1[$i - 1], $nums2[$j - 1]); }
                
                if (($m + $n) % 2 == 1) {
                    // Odd total length, return the middle element
                    return $max_of_left;
                }

                $min_of_right = 0;
                if ($i == $m) { $min_of_right = $nums2[$j]; }
                else if ($j == $n) { $min_of_right = $nums1[$i]; }
                else { $min_of_right = min($nums1[$i], $nums2[$j]); }

                // Even total length, return the average of the two middle elements
                return ($max_of_left + $min_of_right) / 2.0;
            }
        }
        
        // If the function reaches here, it means input arrays are not sorted or have invalid lengths
        throw new Exception("Input arrays are not sorted or have invalid lengths.");
    }
}
