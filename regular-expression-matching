class Solution {

    /**
     * Checks if the input string matches the pattern using '.' and '*'.
     *
     * @param String $s The input string.
     * @param String $p The pattern string.
     * @return Boolean True if $s matches $p, False otherwise.
     */
    function isMatch($s, $p) {
        $m = strlen($s);
        $n = strlen($p);
        
        // Initialize dp table with false
        $dp = array_fill(0, $m + 1, array_fill(0, $n + 1, false));
        
        // Base case: empty string and empty pattern match
        $dp[0][0] = true;
        
        // Fill the first row: pattern is empty, string must be empty
        for ($i = 1; $i <= $m; $i++) {
            $dp[$i][0] = false;
        }
        
        // Fill the first column: string is empty, pattern may match empty string
        for ($j = 1; $j <= $n; $j++) {
            // '*' can match zero of the preceding element
            if ($p[$j - 1] == '*') {
                $dp[0][$j] = $dp[0][$j - 2];
            } else {
                $dp[0][$j] = false;
            }
        }
        
        // Fill the rest of the dp table
        for ($i = 1; $i <= $m; $i++) {
            for ($j = 1; $j <= $n; $j++) {
                if ($p[$j - 1] == '.' || $p[$j - 1] == $s[$i - 1]) {
                    $dp[$i][$j] = $dp[$i - 1][$j - 1];
                } else if ($p[$j - 1] == '*') {
                    // Match zero or more of the preceding element
                    $dp[$i][$j] = $dp[$i][$j - 2]; // zero occurrences of the preceding element
                    if ($p[$j - 2] == '.' || $p[$j - 2] == $s[$i - 1]) {
                        $dp[$i][$j] = $dp[$i][$j] || $dp[$i - 1][$j]; // one or more occurrences of the preceding element
                    }
                } else {
                    $dp[$i][$j] = false;
                }
            }
        }
        
        // Result is in the bottom-right corner of the dp table
        return $dp[$m][$n];
    }
}
